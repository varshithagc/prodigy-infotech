import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

# 1. Transformations
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])

# 2. Load MNIST dataset
train_data = torchvision.datasets.MNIST(root="./data", train=True, download=True, transform=transform)
test_data = torchvision.datasets.MNIST(root="./data", train=False, download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_data, batch_size=64, shuffle=False)

# 3. CNN Model
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, 3, 1)
        self.conv2 = nn.Conv2d(16, 32, 3, 1)
        self.fc1 = nn.Linear(32*5*5, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.max_pool2d(x, 2)
        x = torch.relu(self.conv2(x))
        x = torch.max_pool2d(x, 2)
        x = x.view(-1, 32*5*5)
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# 4. Gesture label mapping
gesture_labels = {
    0: "Palm",
    1: "Fist",
    2: "Thumbs Up",
    3: "Thumbs Down",
    4: "Okay",
    5: "Peace",
    6: "Stop",
    7: "Call Me",
    8: "Rock",
    9: "Pointing"
}

# 5. Train the model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = SimpleCNN().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

epochs = 1  # keep small for demo
for epoch in range(epochs):
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        outputs = model(images)
        loss = criterion(outputs, labels)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

print("Training finished ✅")

# 6. Test visualization with gesture + digit
dataiter = iter(test_loader)
images, labels = next(dataiter)

images, labels = images.to(device), labels.to(device)
outputs = model(images)
_, preds = torch.max(outputs, 1)

# Plot first 6 predictions
# Show first 10 predictions (digits 0–9 mapped to gestures)
fig, axes = plt.subplots(2, 5, figsize=(15,6))  # 2 rows, 5 columns
axes = axes.flatten()

for idx in range(10):  # show 10 images
    digit = preds[idx].item()
    gesture = gesture_labels[digit]
    axes[idx].imshow(images[idx].cpu().squeeze(), cmap="gray")
    axes[idx].set_title(f"Pred: {digit} → {gesture}", fontsize=10)
    axes[idx].axis("off")

plt.show()

